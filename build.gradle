import groovy.sql.Sql

defaultTasks 'compile'

apply plugin: 'war'
apply plugin: 'jetty'

def dbProps = [user: 'root', password: 'throp', allowMultiQueries: 'true'] as Properties
def dbUrl = 'jdbc:mysql://localhost:3306/'
def dbDriver = 'com.mysql.jdbc.Driver'
def httpPort = 8080
def stopPort = 9451
def stopKey = 'foo'

repositories { 
  mavenCentral()
}

configurations {
    driver
}

dependencies {
  driver group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
  compile 'org.hibernate:hibernate-core:3.6.7.Final'
  compile 'mysql:mysql-connector-java:5.1.6' 
  compile 'javassist:javassist:3.12.1.GA'
  compile 'org.springframework:spring-webmvc:3.2.2.RELEASE'
  compile 'org.springframework:spring-aop:3.2.2.RELEASE'
  compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
  compile 'org.aspectj:aspectjweaver:1.7.2'
  compile 'commons-dbcp:commons-dbcp:1.4'
  compile 'org.springframework:spring-hibernate:1.2.9'
  testCompile 'junit:junit:4.+'
  compile group: 'commons-io', name: 'commons-io', version: '1.4'
  compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
}



URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}


/**
 * DATABASE TASKS: for creating/deleting tables, constraints, and data
 */
task dbTestConnection << { 
    println """
  Testing database connection...
  URL: ${dbUrl}
  User: ${dbProps.user}
  Password: ${dbProps.password}
  Driver: ${dbDriver}
            """
    def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
    println "Tables:"
    sql.eachRow( 'show tables' ) { println "  $it." }
}


task dbCreateDatabase << { 
  def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
  sql.execute(new File('src/main/db/create_database.sql').text) 
}

task dbDropDatabase << { 
  def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
  sql.execute(new File('src/main/db/drop_database.sql').text) 
}

task dbCreateTables << { 
  def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
  sql.execute(new File('src/main/db/create_tables.sql').text)
}

task dbDeleteData << { 
  def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
  sql.execute(new File('src/main/db/delete_data.sql').text)
}

task dbInsertData(dependsOn: 'dbDeleteData') << { 
  def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
  sql.execute(new File('src/main/db/insert_default_data.sql').text)
}

task dbDropTables << { 
  def sql = Sql.newInstance(dbUrl, dbProps, dbDriver)
  sql.execute(new File('src/main/db/drop_tables.sql').text)
}
